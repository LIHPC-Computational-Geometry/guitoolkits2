cmake_minimum_required (VERSION 3.20)

function (syntax)
	message (NOTICE "Fichier CMakeLists.txt de compilation/installation de composantes du projet GUIToolkits.")
	message (NOTICE "Ce fichier cmake est à appeler en mode script : cmake [options] -P CMakeLists.txt")
	message (NOTICE "Où \"options\" sont des options cmake ou des options spécifiques à ce projet :")
	message (NOTICE "-help ou --help     :affichage de ce message.")
	message (NOTICE "-tkutil             : compilation/installation de la composante TkUtil.")
	message (NOTICE "-pythonutil         : compilation/installation de la composante PythonUtil.")
	message (NOTICE "-qtutil             : compilation/installation de la composante QtUtil.")
	message (NOTICE "-qtpython           : compilation/installation de la composante QtPython.")
	message (NOTICE "-preferences        : compilation/installation de la composante Preferences.")
	message (NOTICE "-plugin             : compilation/installation de la composante Plugin.")
	message (NOTICE "-qwtcharts          : compilation/installation de la composante QwtCharts.")
	message (NOTICE "-qqualif            : compilation/installation de la composante QQualif.")
	message (NOTICE "      options : [-DBUILD_GQLima:BOOL=ON][-DBUILD_GQGMDS:BOOL=ON][-DBUILD_GQVtk:BOOL=ON] pour installer respectivement les lecteurs Lima/GMDS/VTK")
	message (NOTICE "      L'usage de ces options suppose que les bibliothèques correspondantes soient accessibles à cmake (CMAKE_PREFIX_PATH, ...).")
	message (NOTICE "-qtnetwork          : compilation/installation de la composante QtNetwork.")
	message (NOTICE "-vtkcontrib         : compilation/installation de la composante VtkContrib.")
	message (NOTICE "-qtvtk              : compilation/installation de la composante QtVtk.")
	message (NOTICE "-annotations        : compilation/installation de la composante Annotations.")
	message (NOTICE "-corbautil          : compilation/installation de la composante CorbaUtil.")
	message (NOTICE "Le choix d'une composante entraîne celui de ses dépendances.")
	message (NOTICE "-DUSE_PYTHON_2:BOOL=ON ou -DUSE_PYTHON_3:BOOL=ON : choix de la version majeure de python à utiliser.")
endfunction (syntax)


if (NOT CMAKE_SCRIPT_MODE_FILE)			# En mode script cette variable pointe sur ce fichier
	syntax ( )
	message (FATAL_ERROR "Echec de la compilation/installation de composantes du projet GUIToolkits : cmake non appelé en mode script.")
endif (NOT CMAKE_SCRIPT_MODE_FILE)


# On parse les arguments : presques tous seront transmis à cmake pour la compilation/installation des composantes du projet,
# exception faite des éventuels répertoires transmis de source et build.
set (CMAKE_EXE ${CMAKE_ARGV0})	# Le cmake utilisé ici
set (ARG_NUM 1)
math (EXPR ARGC_COUNT "${CMAKE_ARGC}")	# Nombre d'arguments à parser
set (FOLLOW_P OFF)						# Argument qui suit -P (a priori "CMakeLists.txt")
set (FOLLOW_S OFF)						# Argument qui suit -S, répertoire des sources
set (FOLLOW_B OFF)						# Argument qui suit -B, répertoire de build
set (BUILD_DIR ${CMAKE_SOURCE_DIR})		# Défaut cmake
set (COMPONENTS)						# Liste des composantes du projet à compiler/installer.
set (COMPONENTS_ARGS)					# Arguments transmis à cmake pour la compilation/installation des composantes du projet.
set (PREFIX_PATH )

# Les composantes du projet. Par défaut on ne les installe pas.
set (TK_UTIL OFF)
set (PYTHON_UTIL OFF)
set (QT_UTIL OFF)
set (QT_PYTHON OFF)
set (PREFERENCES OFF)
set (PLUGIN OFF)
set (QWT_CHARTS OFF)
set (QQUALIF OFF)
set (QT_NETWORK OFF)
set (VTKCONTRIB OFF)
set (QT_VTK OFF)
set (ANNOTATIONS OFF)
set (CORBA_UTIL OFF)

# Le parsing :
while (ARG_NUM LESS ARGC_COUNT)
	set (CURRENT_ARG ${CMAKE_ARGV${ARG_NUM}})
	
	if (FOLLOW_B OR FOLLOW_S OR FOLLOW_B)	# Cas particuliers à ne pas transmettre pour les composantes du projet
		if (FOLLOW_B)
			set (BUILD_DIR ${CURRENT_ARG})
		endif (FOLLOW_B)
		set (FOLLOW_P OFF)
		set (FOLLOW_S OFF)
		set (FOLLOW_B OFF)
		math (EXPR ARG_NUM "${ARG_NUM}+1")
		continue ( )
	endif (FOLLOW_B OR FOLLOW_S OR FOLLOW_B)
	
	if (CURRENT_ARG STREQUAL "-P")
		set (FOLLOW_P ON)
	elseif (CURRENT_ARG STREQUAL "-S")
		set (FOLLOW_S ON)
	elseif (CURRENT_ARG STREQUAL "-B")
		set (FOLLOW_B ON)
	elseif (CURRENT_ARG STREQUAL "-tkutil")
		set (TK_UTIL ON)
	elseif (CURRENT_ARG STREQUAL "-pythonutil")
		set (TK_UTIL ON)
		set (PYTHON_UTIL ON)
	elseif (CURRENT_ARG STREQUAL "-qtutil")
		set (TK_UTIL ON)
		set (QT_UTIL ON)
	elseif (CURRENT_ARG STREQUAL "-qtpython")
		set (TK_UTIL ON)
		set (PYTHON_UTIL ON)
		set (QT_UTIL ON)
		set (QT_PYTHON ON)
	elseif (CURRENT_ARG STREQUAL "-preferences")
		set (TK_UTIL ON)
		set (QT_UTIL ON)
		set (PREFERENCES ON)
	elseif (CURRENT_ARG STREQUAL "-plugin")
		set (TK_UTIL ON)
		set (QT_UTIL ON)
		set (PREFERENCES ON)
		set (PLUGIN ON)
	elseif (CURRENT_ARG STREQUAL "-qwtcharts")
		set (TK_UTIL ON)
		set (QT_UTIL ON)
		set (QWT_CHARTS ON)
	elseif (CURRENT_ARG STREQUAL "-qqualif")
		set (TK_UTIL ON)
		set (QT_UTIL ON)
		set (QWT_CHARTS ON)
		set (QQUALIF ON)
	elseif (CURRENT_ARG STREQUAL "-qtnetwork")
		set (TK_UTIL ON)
		set (QT_UTIL ON)
		set (QT_NETWORK ON)
	elseif (CURRENT_ARG STREQUAL "-vtkcontrib")
		set (VTKCONTRIB ON)
	elseif (CURRENT_ARG STREQUAL "-qtvtk")
		set (TK_UTIL ON)
		set (QT_UTIL ON)
		set (VTKCONTRIB ON)
		set (QT_VTK ON)
	elseif (CURRENT_ARG STREQUAL "-annotations")
		set (TK_UTIL ON)
		set (QT_UTIL ON)
		set (VTKCONTRIB ON)
		set (QT_VTK ON)
		set (ANNOTATIONS ON)
	elseif (CURRENT_ARG STREQUAL "-corbautil")
		set (TK_UTIL ON)
		set (CORBA_UTIL ON)
	elseif ((CURRENT_ARG STREQUAL "-help") OR (CURRENT_ARG STREQUAL "--help"))
		syntax ( )
	else ( )
		# On escape les éventuels ";" car sinon cmake bloque. Ca peut arriver par exemple avec -DCMAKE_PREFIX_PATH=blabla;blabla2
		STRING (REPLACE ";" "\\;" CURRENT_ARG_ESCAPED "${CURRENT_ARG}")
		list (APPEND COMPONENTS_ARGS "${CURRENT_ARG_ESCAPED}")
	endif (CURRENT_ARG STREQUAL "-P")
	
	math (EXPR ARG_NUM "${ARG_NUM}+1")
endwhile (ARG_NUM LESS ARGC_COUNT)

# A t'on sélectionné au moins une composante ?
if ((NOT TK_UTIL) AND (NOT VTKCONTRIB))
	syntax ( )
	message (FATAL_ERROR "Echec de la compilation/installation de composantes du projet GUIToolkits : absence de composante sélectionnée.")
endif ((NOT TK_UTIL) AND (NOT VTKCONTRIB))

# On créé la liste ordonnée des composantes à compiler/installer :
list (APPEND COMPONENTS GUIToolkitsVariables)	# Indispensable aux autres
list (APPEND COMPONENTS GUIToolkits)			# Infos sur ce projet
if (TK_UTIL)
	list (APPEND COMPONENTS TkUtil)
endif (TK_UTIL)
if (PYTHON_UTIL)
	list (APPEND COMPONENTS PythonUtil)
endif (PYTHON_UTIL)
if (QT_UTIL)
	list (APPEND COMPONENTS QtUtil)
endif (QT_UTIL)
if (QT_PYTHON)
	list (APPEND COMPONENTS QtPython)
endif (QT_PYTHON)
if (PREFERENCES)
	list (APPEND COMPONENTS Preferences)
endif (PREFERENCES)
if (PLUGIN)
	list (APPEND COMPONENTS Plugin)
endif (PLUGIN)
if (QWT_CHARTS)
	list (APPEND COMPONENTS QwtCharts)
endif (QWT_CHARTS)
if (QQUALIF)
	list (APPEND COMPONENTS QQualif)
endif (QQUALIF)
if (QT_NETWORK)
	list (APPEND COMPONENTS QtNetwork)
endif (QT_NETWORK)
if (VTKCONTRIB)
	list (APPEND COMPONENTS VtkContrib)
endif (VTKCONTRIB)
if (QT_VTK)
	list (APPEND COMPONENTS QtVtk)
endif (QT_VTK)
if (ANNOTATIONS)
	list (APPEND COMPONENTS Annotations)
endif (ANNOTATIONS)
if (CORBA_UTIL)
	list (APPEND COMPONENTS CorbaUtil)
endif (CORBA_UTIL)
message (STATUS "====> Composantes à installer : ${COMPONENTS}.")


# On compile et installe les composantes demandées :
get_filename_component (GUI_TOOLKITS_DIRECTORY ${CMAKE_SCRIPT_MODE_FILE} DIRECTORY)	# Répertoire du projet contenant les composantes
get_filename_component (GUI_TOOLKITS_DIRECTORY_NAME ${GUI_TOOLKITS_DIRECTORY} NAME)	# Nom du répertoire du projet contenant les composantes
# En mode script de cmake enable_testing ( ) est interdit => on génère le fichier ctest racine :
set (CTEST_ROOT_FILE ${BUILD_DIR}/${GUI_TOOLKITS_DIRECTORY_NAME}/CTestTestfile.cmake)
execute_process (COMMAND mkdir -p ${BUILD_DIR}/${GUI_TOOLKITS_DIRECTORY_NAME})
execute_process (COMMAND rm -f ${CTEST_ROOT_FILE})	# Forcer sa regénération en toutes circonstances, c.a.d. par ex. changement d'options (d'installation) transmises à cmake
# Le contenu du fichier ctest racine : on l'écrit dans un buffer que l'on écrira à la fin dans le fichier (pas trouvé comment faire du rajout type "append" avec execute_process)
set (CTEST_ROOT_FILE_CONTENTS "# CMake generated Testfile for\n# Source directory: ${GUI_TOOLKITS_DIRECTORY}\n# Build directory: ${BUILD_DIR}/${GUI_TOOLKITS_DIRECTORY_NAME}\n#\n# This file includes the relevant testing commnds required for\n# testing this directory and lists subdirectories to be tested as well.")
foreach (component IN LISTS COMPONENTS)
	set (COMPONENT_SOURCE_DIR ${GUI_TOOLKITS_DIRECTORY}/${component})
	set (COMPONENT_BUILD_DIR ${BUILD_DIR}/${GUI_TOOLKITS_DIRECTORY_NAME}/${component})
	message (STATUS "    ---> Déploiement de ${component} ...")
	message (DEBUG "     Configuration de ${COMPONENT_SOURCE_DIR} dans ${COMPONENT_BUILD_DIR} ...")
	execute_process (COMMAND ${CMAKE_EXE} ${COMPONENTS_ARGS} "-S" ${COMPONENT_SOURCE_DIR} "-B" ${COMPONENT_BUILD_DIR} COMMAND_ERROR_IS_FATAL ANY)
	message (DEBUG "     Compilation de ${COMPONENT_SOURCE_DIR} dans ${COMPONENT_BUILD_DIR} ...")
	execute_process (COMMAND ${CMAKE_EXE} "--build" ${COMPONENT_BUILD_DIR} COMMAND_ERROR_IS_FATAL ANY)
	message (DEBUG "     Déploiement de ${component} dans ${CMAKE_INSTALL_PREFIX} ...")
	execute_process (COMMAND ${CMAKE_EXE} "--install" ${COMPONENT_BUILD_DIR} COMMAND_ERROR_IS_FATAL ANY)
	message (DEBUG "     Composante ${component} déployée dans ${CMAKE_INSTALL_PREFIX}.")
	string (APPEND CTEST_ROOT_FILE_CONTENTS "\nsubdirs(${component})")
endforeach (component IN LISTS COMPONENTS)
# Génération effective du fichier ctest racine :
execute_process (COMMAND echo "${CTEST_ROOT_FILE_CONTENTS}" OUTPUT_FILE ${CTEST_ROOT_FILE})

message (STATUS "====> Composantes ${COMPONENTS} installées.")

#enable_testing ( )	# Not scriptable :(
